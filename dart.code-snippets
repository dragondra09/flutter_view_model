{
    "View": {
        "prefix": ["view", "v"],
        "body": [
            "class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}View extends View<${1}ViewModel> {",
            "  const ${1}View({super.key});",
            "",
            "  @override",
            "  ViewState<${1}View, ${1}ViewModel> createState() => _${1}ViewState();",
            "",
            "  @override",
            "  ${1}ViewModel createViewModel() => ${1}ViewModel();",
            "}",
            "",
            "class _${1}ViewState extends ViewState<${1}View, ${1}ViewModel> {",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Scaffold(",
            "      body: Column(",
            "        children: <Widget>[",
            "          // * listen countNotifier and rebuild",
            "          ValueListenableBuilder<int>(",
            "            valueListenable: viewModel.countNotifier,",
            "            builder: (context, value, child) {",
            "              return Text('$value');",
            "            },",
            "          ),",
            "          // * rebuild when updateUI call",
            "          Text(",
            "            '${viewModel.count}',",
            "          ),",
            "          // * call action in viewModel (should have all logic in here",
            "          // * ex: call api, refesh, ...)",
            "          FloatingActionButton(",
            "            onPressed: () => viewModel.increase(),",
            "            child: const Icon(Icons.add),",
            "          ),",
            "        ],",
            "      ),",
            "    );",
            "  }",
            "}",
            ""
        ],
        "description": "View"
    },
    "ViewModel": {
        "prefix": ["view_model", "vm"],
        "body": [
            "class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}ViewModel extends ViewModel {",
            "  int count;",
            "  ValueNotifier<int> countNotifier;",
            "",
            "  ${1}ViewModel()",
            "      : count = 0,",
            "        countNotifier = ValueNotifier(0);",
            "",
            "  void increase() {",
            "    count = count + 1;",
            "    updateUI();",
            "    // only update widget using [ValueListenableBuilder]",
            "    countNotifier.value++;",
            "  }",
            "",
            "  @override",
            "  void dispose() {",
            "    countNotifier.dispose();",
            "  }",
            "",
            "  @override",
            "  void afterFirstLayout(BuildContext context) {}",
            "}",
            ""
        ],
        "description": "ViewModel"
    },
}
